<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.p2p.domain.cms.repository.CategoryRepository">

    <!--基本字段定义 -->
    <sql id="base_column">
        ID,
        CATEGORY_CODE,
        CATEGORY_PATH,
        PARENT_CATEGORY,
        TITLE,
        CONTENT,
        SEO_DESCRIPTION,
        SEO_KEYWORDS,
        ORDER_NUM,
        CATEGORY_TYPE,
        TARGET,
        TARGET_URL,
        PER_PAGE,
        STATUS,
        CREATE_TIME,
        UPDATE_TIME,
        CREATE_USER_ID,
        UPDATE_USER_ID,
        VERSION
    </sql>

    <!--按主键进行查询，返回唯一一条记录 对应repository findOne方法 -->
    <select id="findOne" parameterType="string" resultType="Category">
        SELECT 
            <include refid="base_column" />
        FROM 
            CATEGORY
        WHERE
            ID = #{id}
    </select>
 
 

    <!--无条件全部记录检索 对应repository findAll方法 -->
    <select id="findAll" resultType="Category">
        SELECT 
            <include refid="base_column" />
        FROM 
            CATEGORY
    </select>

    <!--无条件全部记录分页检索 对应repository findAll方法 -->
    <select id="findPageAll" parameterType="CategoryCriteria" resultType="Category">
        SELECT
            <include refid="base_column" />
        FROM 
            CATEGORY
    </select>

    <!--插入记录 对应repository insert方法 -->
    <insert id="insert" parameterType="Category">
        INSERT INTO
            CATEGORY
        (
             <include refid="base_column" />

        )
        VALUES
        (
          #{id},
          #{categoryCode},
          #{categoryPath},
          #{parentCategory},
          #{title},
          #{content},
          #{seoDescription},
          #{seoKeywords},
          #{orderNum},
          #{categoryType},
          #{target},
          #{targetUrl},
          #{perPage},
          #{status},
          #{createTime},
          #{updateTime},
          #{createUserId},
          #{updateUserId},
          #{version}
        )
    </insert>

    <!--动态更新 对Input来的数据不为空的字段进行更新 对应repository dynamicUpdate方法 -->
    <update id="dynamicUpdate" parameterType="Category">
        UPDATE
            CATEGORY
        <set>
            <if test="categoryCode != null">
                CATEGORY_CODE = #{categoryCode},
            </if>
            <if test="categoryPath != null">
                CATEGORY_PATH = #{categoryPath},
            </if>
            <if test="parentCategory != null">
                PARENT_CATEGORY = #{parentCategory},
            </if>
            <if test="title != null">
                TITLE = #{title},
            </if>
            <if test="content != null">
                CONTENT = #{content},
            </if>
            <if test="seoDescription != null">
                SEO_DESCRIPTION = #{seoDescription},
            </if>
            <if test="seoKeywords != null">
                SEO_KEYWORDS = #{seoKeywords},
            </if>
            <if test="orderNum != null">
                ORDER_NUM = #{orderNum},
            </if>
            <if test="categoryType != null">
                CATEGORY_TYPE = #{categoryType},
            </if>
            <if test="target != null">
                TARGET = #{target},
            </if>
            <if test="targetUrl != null">
                TARGET_URL = #{targetUrl},
            </if>
            <if test="perPage != null">
                PER_PAGE = #{perPage},
            </if>
            <if test="status != null">
                STATUS = #{status},
            </if>
            <if test="createTime != null">
                CREATE_TIME = #{createTime},
            </if>
            <if test="updateTime != null">
                UPDATE_TIME = #{updateTime},
            </if>
            <if test="createUserId != null">
                CREATE_USER_ID = #{createUserId},
            </if>
            <if test="updateUserId != null">
                UPDATE_USER_ID = #{updateUserId},
            </if>
            <if test="version != null">
                VERSION = #{version}
            </if>
        </set>
        WHERE
            ID = #{id}
    </update>

    <!--动态更新 按照实体的值实际数据进行更新对应repository update方法 -->
    <update id="update" parameterType="Category">
        UPDATE
            CATEGORY
        SET
            CATEGORY_CODE = #{categoryCode},
            CATEGORY_PATH = #{categoryPath},
            PARENT_CATEGORY = #{parentCategory},
            TITLE = #{title},
            CONTENT = #{content},
            SEO_DESCRIPTION = #{seoDescription},
            SEO_KEYWORDS = #{seoKeywords},
            ORDER_NUM = #{orderNum},
            CATEGORY_TYPE = #{categoryType},
            TARGET = #{target},
            TARGET_URL = #{targetUrl},
            PER_PAGE = #{perPage},
            STATUS = #{status},
            CREATE_TIME = #{createTime},
            UPDATE_TIME = #{updateTime},
            CREATE_USER_ID = #{createUserId},
            UPDATE_USER_ID = #{updateUserId},
            VERSION = #{version}
        WHERE
            ID = #{id}
    </update>
    
    <!--假删除 对应repository suspend方法 -->
    <update id="suspend" parameterType="string">
        UPDATE
            CATEGORY
        SET
            DEL_FLAG=1
        WHERE
            ID = #{id}
    </update>
    
    <!--真删除 对应repository delete方法 -->    
    <delete id="delete" parameterType="string">
        DELETE FROM 
            CATEGORY
        WHERE
            ID = #{id}
    </delete>
</mapper>
