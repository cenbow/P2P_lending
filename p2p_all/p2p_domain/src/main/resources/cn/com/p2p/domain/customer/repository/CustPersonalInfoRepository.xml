<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.p2p.domain.customer.repository.CustPersonalInfoRepository">

    <!--基本字段定义 -->
    <sql id="base_column">
        ID,
        CUSTOMER_CODE,
        CUSTOMER_NAME,
        IDENTITY,
        CELLPHONE,
        EMAIL,
        USER_ID,
        TENANT_ID,
        CREATE_TIME,
        UPDATE_TIME,
        CREATE_USER_ID,
        UPDATE_USER_ID,
        VERSION
    </sql>

    <!--按主键进行查询，返回唯一一条记录 对应repository findOne方法 -->
    <select id="findOne" parameterType="string" resultType="CustPersonalInfo">
        SELECT 
            <include refid="base_column" />
        FROM 
            CUST_PERSONAL_INFO
        WHERE
            ID = #{id}
    </select>
 
 
    <!--按主键进行查询，返回唯一一条记录 对应repository findCustPersonalInfoBycustomerCode方法 -->
    <select id="findCustPersonalInfoByCustomerCode" parameterType="string" resultType="CustPersonalInfo">
        SELECT
            <include refid="base_column" />
        FROM
            CUST_PERSONAL_INFO
        WHERE
            CUSTOMER_CODE = #{customerCode}
    </select>

    <!--无条件全部记录检索 对应repository findAll方法 -->
    <select id="findAll" resultType="CustPersonalInfo">
        SELECT 
            <include refid="base_column" />
        FROM 
            CUST_PERSONAL_INFO
    </select>

    <!--无条件全部记录分页检索 对应repository findAll方法 -->
    <select id="findPageAll" parameterType="CustPersonalInfoCriteria" resultType="CustPersonalInfo">
        SELECT
            <include refid="base_column" />
        FROM 
            CUST_PERSONAL_INFO
    </select>

    <!--插入记录 对应repository insert方法 -->
    <insert id="insert" parameterType="CustPersonalInfo">
        INSERT INTO
            CUST_PERSONAL_INFO
        (
             <include refid="base_column" />

        )
        VALUES
        (
          #{id},
          #{customerCode},
          #{customerName},
          #{identity},
          #{cellphone},
          #{email},
          #{userId},
          #{tenantId},
          #{createTime},
          #{updateTime},
          #{createUserId},
          #{updateUserId},
          #{version}
        )
    </insert>

    <!--动态更新 对Input来的数据不为空的字段进行更新 对应repository dynamicUpdate方法 -->
    <update id="dynamicUpdate" parameterType="CustPersonalInfo">
        UPDATE
            CUST_PERSONAL_INFO
        <set>
            <if test="customerCode != null">
                CUSTOMER_CODE = #{customerCode},
            </if>
            <if test="customerName != null">
                CUSTOMER_NAME = #{customerName},
            </if>
            <if test="identity != null">
                IDENTITY = #{identity},
            </if>
            <if test="cellphone != null">
                CELLPHONE = #{cellphone},
            </if>
            <if test="email != null">
                EMAIL = #{email},
            </if>
            <if test="userId != null">
                USER_ID = #{userId},
            </if>
            <if test="tenantId != null">
                TENANT_ID = #{tenantId},
            </if>
            <if test="createTime != null">
                CREATE_TIME = #{createTime},
            </if>
            <if test="updateTime != null">
                UPDATE_TIME = #{updateTime},
            </if>
            <if test="createUserId != null">
                CREATE_USER_ID = #{createUserId},
            </if>
            <if test="updateUserId != null">
                UPDATE_USER_ID = #{updateUserId},
            </if>
            <if test="version != null">
                VERSION = #{version}
            </if>
        </set>
        WHERE
            ID = #{id}
    </update>

    <!--动态更新 按照实体的值实际数据进行更新对应repository update方法 -->
    <update id="update" parameterType="CustPersonalInfo">
        UPDATE
            CUST_PERSONAL_INFO
        SET
            CUSTOMER_CODE = #{customerCode},
            CUSTOMER_NAME = #{customerName},
            IDENTITY = #{identity},
            CELLPHONE = #{cellphone},
            EMAIL = #{email},
            USER_ID = #{userId},
            TENANT_ID = #{tenantId},
            CREATE_TIME = #{createTime},
            UPDATE_TIME = #{updateTime},
            CREATE_USER_ID = #{createUserId},
            UPDATE_USER_ID = #{updateUserId},
            VERSION = #{version}
        WHERE
            ID = #{id}
    </update>
    
    <!--假删除 对应repository suspend方法 -->
    <update id="suspend" parameterType="string">
        UPDATE
            CUST_PERSONAL_INFO
        SET
            DEL_FLAG=1
        WHERE
            ID = #{id}
    </update>
    
    <!--真删除 对应repository delete方法 -->    
    <delete id="delete" parameterType="string">
        DELETE FROM 
            CUST_PERSONAL_INFO
        WHERE
            ID = #{id}
    </delete>
</mapper>
