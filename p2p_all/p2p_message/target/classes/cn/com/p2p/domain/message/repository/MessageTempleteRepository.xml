<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.p2p.domain.message.repository.MessageTempleteRepository">

    <!--基本字段定义 -->
    <sql id="base_column">
        ID,
        MSG_TYPE,
        MSG_BIZ_TYPE,
        MSG_TITLE,
        MSG_TEML,
        MSG_RECEIVE_TYPE,
        VALID_FLAG,
        TENANT_CD
    </sql>

    <!--按主键进行查询，返回唯一一条记录 对应repository findOne方法 -->
    <select id="findOne" parameterType="string" resultType="MessageTemplete">
        SELECT 
            <include refid="base_column" />
        FROM 
            MESSAGE_TEMPLETE
        WHERE
            ID = #{id}
    </select>
 
    <!--按业务键进行查询，返回集合记录 对应repository findMessageTempleteByBizKeys方法 -->
    <select id="findMessageTempleteByBizKeys" resultType="MessageTemplete">
        SELECT
            <include refid="base_column" />
        FROM
            MESSAGE_TEMPLETE
        WHERE
            MSG_TYPE = #{msgType} AND MSG_BIZ_TYPE = #{msgBizType} AND MSG_RECEIVE_TYPE = #{msgReceiveType} AND VALID_FLAG = #{validFlag} AND TENANT_CD = #{tenantCd}
    </select>
 

    <!--无条件全部记录检索 对应repository findAll方法 -->
    <select id="findAll" resultType="MessageTemplete">
        SELECT 
            <include refid="base_column" />
        FROM 
            MESSAGE_TEMPLETE
    </select>

    <!--无条件全部记录分页检索 对应repository findAll方法 -->
    <select id="findPageAll" parameterType="MessageTempleteCriteria" resultType="MessageTemplete">
        SELECT
            <include refid="base_column" />
        FROM 
            MESSAGE_TEMPLETE
    </select>

    <!--插入记录 对应repository insert方法 -->
    <insert id="insert" parameterType="MessageTemplete">
        INSERT INTO
            MESSAGE_TEMPLETE
        (
             <include refid="base_column" />

        )
        VALUES
        (
          #{id},
          #{msgType},
          #{msgBizType},
          #{msgTitle},
          #{msgTeml},
          #{msgReceiveType},
          #{validFlag},
          #{tenantCd}
        )
    </insert>

    <!--动态更新 对Input来的数据不为空的字段进行更新 对应repository dynamicUpdate方法 -->
    <update id="dynamicUpdate" parameterType="MessageTemplete">
        UPDATE
            MESSAGE_TEMPLETE
        <set>
            <if test="msgType != null">
                MSG_TYPE = #{msgType},
            </if>
            <if test="msgBizType != null">
                MSG_BIZ_TYPE = #{msgBizType},
            </if>
            <if test="msgTitle != null">
                MSG_TITLE = #{msgTitle},
            </if>
            <if test="msgTeml != null">
                MSG_TEML = #{msgTeml},
            </if>
            <if test="msgReceiveType != null">
                MSG_RECEIVE_TYPE = #{msgReceiveType},
            </if>
            <if test="validFlag != null">
                VALID_FLAG = #{validFlag},
            </if>
            <if test="tenantCd != null">
                TENANT_CD = #{tenantCd}
            </if>
        </set>
        WHERE
            ID = #{id}
    </update>

    <!--动态更新 按照实体的值实际数据进行更新对应repository update方法 -->
    <update id="update" parameterType="MessageTemplete">
        UPDATE
            MESSAGE_TEMPLETE
        SET
            MSG_TYPE = #{msgType},
            MSG_BIZ_TYPE = #{msgBizType},
            MSG_TITLE = #{msgTitle},
            MSG_TEML = #{msgTeml},
            MSG_RECEIVE_TYPE = #{msgReceiveType},
            VALID_FLAG = #{validFlag},
            TENANT_CD = #{tenantCd}
        WHERE
            ID = #{id}
    </update>
    
    <!--假删除 对应repository suspend方法 -->
    <update id="suspend" parameterType="string">
        UPDATE
            MESSAGE_TEMPLETE
        SET
            DEL_FLAG=1
        WHERE
            ID = #{id}
    </update>
    
    <!--真删除 对应repository delete方法 -->    
    <delete id="delete" parameterType="string">
        DELETE FROM 
            MESSAGE_TEMPLETE
        WHERE
            ID = #{id}
    </delete>
</mapper>
